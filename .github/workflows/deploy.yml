# .github/workflows/deploy.yml
name: Build and Deploy

on:
  push:
    branches: [ main ]  # or your default branch
  workflow_dispatch:    # allows manual triggering

env:
  AWS_REGION: ap-south-1
  PROJECT_NAME: investryx

permissions:
  id-token: write
  contents: read

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build and push images
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build and push backend
          docker build -t $ECR_REGISTRY/$PROJECT_NAME-backend:$IMAGE_TAG \
            -t $ECR_REGISTRY/$PROJECT_NAME-backend:latest \
            -f deployment/docker/backend/Dockerfile .
          docker push $ECR_REGISTRY/$PROJECT_NAME-backend:$IMAGE_TAG
          docker push $ECR_REGISTRY/$PROJECT_NAME-backend:latest

          # Build and push nginx
          docker build -t $ECR_REGISTRY/$PROJECT_NAME-nginx:$IMAGE_TAG \
            -t $ECR_REGISTRY/$PROJECT_NAME-nginx:latest \
            -f deployment/docker/nginx/Dockerfile deployment/docker/nginx
          docker push $ECR_REGISTRY/$PROJECT_NAME-nginx:$IMAGE_TAG
          docker push $ECR_REGISTRY/$PROJECT_NAME-nginx:latest

          # Push Redis
          docker pull redis:6-alpine
          docker tag redis:6-alpine $ECR_REGISTRY/$PROJECT_NAME-redis:$IMAGE_TAG
          docker tag redis:6-alpine $ECR_REGISTRY/$PROJECT_NAME-redis:latest
          docker push $ECR_REGISTRY/$PROJECT_NAME-redis:$IMAGE_TAG
          docker push $ECR_REGISTRY/$PROJECT_NAME-redis:latest

      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
          HOST: ${{ secrets.EC2_HOST }}
          USER: ubuntu
        run: |
          echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
          scp -i private_key -o StrictHostKeyChecking=no \
            docker-compose.yml $USER@$HOST:/opt/smerger/
          ssh -i private_key -o StrictHostKeyChecking=no $USER@$HOST \
            'cd /opt/smerger && \
             echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" > .env && \
             echo "AWS_REGION=${{ env.AWS_REGION }}" >> .env && \
             docker compose pull && \
             docker compose up -d'
