version: 0.2

env:
  variables:
    AWS_DEFAULT_REGION: ap-south-1
    AWS_ACCOUNT_ID: 459858848469
    ENV: prod
    NODE_ENV: production

phases:
  install:
    runtime-versions:
      nodejs: 20
    commands:
      - echo "Installing latest npm"
      - npm install -g npm@latest

  pre_build:
    commands:
      - echo "Logging in to Amazon ECR"
      - aws ecr get-login-password --region $AWS_DEFAULT_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com

      - echo "Cloning repository"
      - git clone https://github.com/Emergiogames/investryx_prod.git
      - cd investryx_prod
      - git checkout main
      - git pull origin main

      - export IMAGE_TAG=$(date +%d%m%Y)

  build:
    commands:
      - echo "Building frontend"
      - cd src/frontend

      - if [ ! -f "package.json" ]; then echo "package.json not found in src/frontend"; exit 1; fi

      - if [ -f "package-lock.json" ]; then
          npm ci --legacy-peer-deps;
        else
          npm install --legacy-peer-deps;
        fi

      - npm install vite@^5.3.1 --save-dev --legacy-peer-deps
      - npm install @vitejs/plugin-react@^4.3.1 --save-dev --legacy-peer-deps

      - npx vite build

      - cd ../..

      - echo "Preparing nginx dist directory"
      - mkdir -p deployment/docker/nginx/dist
      - rm -rf deployment/docker/nginx/dist/*

      - if [ -d "src/frontend/dist" ]; then
          cp -r src/frontend/dist/* deployment/docker/nginx/dist/;
        elif [ -d "src/frontend/build" ]; then
          cp -r src/frontend/build/* deployment/docker/nginx/dist/;
        else
          echo "No dist or build folder found";
          exit 1;
        fi

      - echo "Building Docker images"
      - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-backend:$IMAGE_TAG -f deployment/docker/backend/Dockerfile .

      - docker build -t $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-nginx:$IMAGE_TAG -f deployment/docker/nginx/Dockerfile deployment/docker/nginx

      - docker pull public.ecr.aws/docker/library/redis:6-alpine
      - docker tag public.ecr.aws/docker/library/redis:6-alpine $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-redis:$IMAGE_TAG

  post_build:
    commands:
      - echo "Pushing images to ECR"
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-backend:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-nginx:$IMAGE_TAG
      - docker push $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-redis:$IMAGE_TAG

      - printf '{"ImageURI":"%s"}' $AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/investryx-backend:$IMAGE_TAG > imageDefinitions.json

artifacts:
  files:
    - imageDefinitions.json
  discard-paths: yes
